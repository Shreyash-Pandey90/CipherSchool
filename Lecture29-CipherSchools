public class Lecture29 
{

//                                      ---------------------------------Palindrome---------------------------

    public static boolean palindrome(String S)
    {
        S=S.toUpperCase();
        int left=0;
        int right=S.length()-1;
        while(left<right)
        {
            if( S.charAt(left)!=S.charAt(right))return false;  //time complexity O(n) and space O(1);
            left++;
            right--;
            
        }
        return true;
    }

//                                      ---------------------------------Anagrams---------------------------
//                                            when both string have similar word and same no of times



//this approach only if there is string of (A to Z)
// for all characters we cna use 256 instead of 26
public static  boolean anagram(String s1,String s2)
{
    int n=s1.length();
    s1=s1.toLowerCase();
    s2=s2.toLowerCase();

    // char[] a1=new char[26];
    // char a2[]=new char[26];


    char[] a1=new char[256];
    char a2[]=new char[256];

    if(s1.length()!=s2.length())return false;

    for(int i=0;i<n;i++)
    {
       // int index1 = s1.charAt(i)-'a';
       int index1 = s1.charAt(i);
        a1[index1]++;

        //int index2 =s2.charAt(i)-'a';
        int index2 = s2.charAt(i);  // now indesx 0 and asccii avle also from 0 only , a will be store at 65
        a2[index2]++;
    }

   // for(int i=0;i<26;i++)
   for(int i=0;i<256;i++)
    {
        if(a1[i]!=a2[i])return false;
    }

    return true;
}




    public static void main(String args[])
    {
        String a= "malayalam";
        String b="aaaallmmy";
        String c="ammaa\" babu|| ";
        String d="amama\" buba|| ";

       // System.out.println(palindrome(a));

        System.out.println(anagram(a,b));
        System.out.println(anagram(c,b));
        System.out.println(anagram(c,d));
    }
}
