//          --------------------------------Approach 1----------------------------------

class Intersect
{
    //Function to find intersection point in Y shaped Linked Lists.
	int intersectPoint(Node head1, Node head2)
	{
         Node ptr1=head1;
         Node ptr2 =head2;
         
        int len1=0;
        int len2=0;
         
        while(ptr1!=null)
        {
           ptr1=ptr1.next;
           len1++;
        }
        while(ptr2!=null)
        {
            ptr2=ptr2.next;
            len2++;
        }
        ptr1=head1;
        ptr2=head2;
        
        if(len1>len2)
        {
            int n=len1-len2;
            
            for(int i=0;i<n;i++)
            {
                ptr1=ptr1.next;
            }
        }
        
        
        if(len1<len2)
        {
            int n=len2-len1;
            
            for(int i=0;i<n;i++)
            {
                ptr2=ptr2.next;
            }
        }
        
        while(ptr1!=ptr2)
        {
        ptr1=ptr1.next;
        ptr2=ptr2.next;
        if(ptr1==null && ptr2==null)return -1;
        }
        return ptr1.data;
	}
}


//        ----------------------------------------------------Approach 2-----------------------------------------

class Intersect
{
    //Function to find intersection point in Y shaped Linked Lists.
	int intersectPoint(Node head1, Node head2)
	{
         Node ptr1=head1;
         Node ptr2 =head2;
         
         while(ptr1!=ptr2)
         {
             
             if(ptr1==null)ptr1=head2;
             ptr1=ptr1.next;
             
             if(ptr2==null)ptr2=head1;
             ptr2=ptr2.next;
             
             if(ptr1==null && ptr2==null)return -1;
         }
         return ptr1.data;
	}
}
