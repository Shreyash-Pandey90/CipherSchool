import java.util.LinkedList;
import java.util.Queue;

class Tree
{
    int data;
    Tree left;
    Tree right;
    Tree(int x)
    {
        data=x;
        left=null;
        right=null;
    }
}

public class Lecture51 
{
    public static Tree BSTsearch(Tree root,int x)
    {
        if(root==null)return null;
        else
        {
        if(root.data==x)return root;
        else if(root.data<x)
        {
        return BSTsearch(root.right,x);
        }
        else
        return BSTsearch(root.left,x);
        }
    }

    public static Tree BSTI(Tree root,int x)
    {
        if(root==null)return null;
        while(root!=null)
        {
            if(root.data==x)return root;
            else if(root.data>x)root=root.left;
            else
            root=root.right;
        }
        return null;

    } 

    //here we have to write the insertion in tree fxn

    public static Tree insert(Tree root,int x)
    {
        // Tree a=new Tree(x);
        if(root==null)
        {
            return root=new Tree(x);
        }

        if(x<root.data)
        root.left=insert(root.left,x);

        if(x>root.data)
        root.right=insert(root.right,x);
        
        return root;
    }

    //we havee to write the tree traversal fxn to check my insertion of elements
    // public static void preorder(Tree root)
    // {
        
    //     if(root!=null)
    //     {
    //         System.out.print(root.data+" ");
    //         print(root.left);
    //         print(root.right);
    //     }
    // }

    // public static void print(Tree root)
    // {
    //     if(root!=null)
    //     {
    //     //System.out.print(root.data+" ");
    //     if(root.left!=null)
    //     System.out.print(root.left.data+" ");
    //     if(root.right!=null)
    //     System.out.print(root.right.data+" ");
    //     print(root.left);
    //     print(root.right);
    //     }

    // }


    //Fxn to find the min element
        public static int min(Tree root)
        {
            while(root.left!=null)
            {
                root=root.left;
            }
            return root.data;

        }

    //fxn to find the max element

    public static int max(Tree root)
        {
            while(root.right!=null)
            {
                root=root.right;
            }
            return root.data;

        }

    

    public static void main(String args[])
    {
        Tree root=new Tree(10);
        root.left=new Tree(5);
        root.right=new Tree(15);
        root.left.left=new Tree(4);
        root.left.right=new Tree(6);
        root.right.left=new Tree(14);
        root.right.right=new Tree(25);

        insert(root,-8);
        insert(root,3);
        insert(root, 90);

        // System.out.print(root.data+" ");
        // print(root);

        System.out.println(BSTsearch(root,4));
        System.out.println(BSTsearch(root,90));
        System.out.println(BSTsearch(root,2));
        System.out.println();
        System.out.println(BSTI(root,4));
        System.out.println(BSTI(root,90));
        System.out.println(BSTI(root,2));
        System.out.println(min(root));
        System.out.println(max(root));


        
    }
}

/*For the binary search tree the  leftmost element
 of the tree is the smalllest

 and for max the rightmost element will be the 
 maximum
  */
